@using Humanizer
@using Pickup.Application.Responses.Identity

@namespace Pickup.Client.Shared.Components.MessagesComponents
<MudItem md="12">
    @if (ChatUsers != null)
    {

        <div class="msg-Holder">
            @foreach (var user in ChatUsers)
            {
                <div class="@StyleClass(user)" @onclick="() =>GoToMessage(user)" title=" @user.LastMessage">

                    <div class="msg-avatar">
                        @user.UserName.ToUpper().FirstOrDefault()
                    </div>
                    <div class="msg-Name">
                        @user.FirstName @user.LastName
                    </div>
                    <div class="msg-msg">
                        @user.LastMessage
                    </div>
                    <div class="time-icon">
                        <span></span>
                        <span>@user.LastMessageTime.Humanize(false, DateTime.Now)</span>
                    </div>
                </div>
            }
        </div>

    }
</MudItem>
@code {
    DateTime Mydate = DateTime.UtcNow;
    [Parameter]
    public List<ChatUserResponse> ChatUsers { get; set; }
    [CascadingParameter]
    public Action GetMessages { get; set; }
    private void GoToMessage(ChatUserResponse user)
    {
        _navigationManager.NavigateTo(HrifLink(user), true);
    }
    public string StyleClass(ChatUserResponse message)
    {
        if (message.Readed)
        {
            return "msg-item";
        }
        else
        {
            return "msg-item un-read";
        }
        GetMessages();
        StateHasChanged();
    }
    public string HrifLink(ChatUserResponse message)
    {
        return $"chat/{message.Id}";
    }
}
<style>
    .item {
        background-color: #EEEDF0;
    }

        .item:hover {
            background-color: #F0F0F0;
        }
</style>
