@inject IChatManager _ChatManager
@inject AppState appState
<div class="notification">
    <MudMenu Dense="true" AnchorOrigin="Origin.BottomCenter" PopoverClass="pop-custom" TransformOrigin="Origin.TopCenter" Style="padding-top:1px" @onclick="@OnMessagesClick" MaxHeight="300" Icon="@_Icon()" Direction="Direction.Bottom" Color="Color.Inherit">
        <span style="border: 13px solid; border-style: solid; border-color: transparent transparent white transparent; position: absolute; top: -26px; right: 124px; z-index: 9999999999; "></span>
        <MudContainer Style=" height: 245px; width: 273px; padding: 0px;white-space:nowrap;overflow-y:auto">
            <Pickup.Client.Shared.Components.MessagesComponents.MessageItem ChatUsers="ChatUsers"></Pickup.Client.Shared.Components.MessagesComponents.MessageItem>

        </MudContainer>
        <MudDivider />
        <MudText Align="Align.Center"> <MudLink Style="margin-bottom:1px;" Typo="Typo.body2" Href="#">All Messages</MudLink></MudText>
    </MudMenu>
    @if (appState.MessagesCounter > 0)
    {
        <MudBadge Style="position:absolute; margin-top:10px;margin-left:-10px" Overlap="true" Color="Color.Error" Content="@appState.MessagesCounter"></MudBadge>

    }

</div>
<style>
    .pop-custom {
        overflow: inherit;
    }

    .mud-list {
        position: initial !important;
    }
</style>

@code {
    private int _MessageCounter = 0;
    [Parameter]
    public int MessagesCounter
    {
        get => _MessageCounter;
        set
        {
            if (value == _MessageCounter)
                return;

            _MessageCounter = value;
            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync();
            }
        }
    }
    private async Task OnMessagesClick()
    {
        await _ChatManager.MarkAllasRead();

        _MessageCounter = 0;
        MessagesCounter = 0;
        StateHasChanged();
    }
    [Parameter]
    public EventCallback<ChangeEventArgs> ValueChanged { get; set; }
    [Parameter]
    public List<Pickup.Application.Responses.Identity.ChatUserResponse> ChatUsers { get; set; }
    public string _Icon()
    {
        if (_MessageCounter > 0)
        {
            return Icons.Material.Filled.MarkEmailUnread;
        }
        else
        {
            return Icons.Material.Filled.Mail;
        }
    }
}
