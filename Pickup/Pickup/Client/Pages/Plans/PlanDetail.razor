@using Application.Features.Plans.Queries.Dto
<MudDialog>
    <DialogContent>
        <MudContainer Style=" overflow-y: scroll">
            @if (Plan != null)
            {
                <MudSimpleTable Style="overflow-x: auto;" Striped="true" Hover="true" Bordered="true" Elevation="5">
                    <thead>
                        <tr>
                            <th>Day</th>
                            <th>Day Name</th>
                            @foreach (var item in MealsCategory)
                            {
                                <th>@item</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 1; i < Plan.TbPlanMasterLines.Max(x => x.Days) + 1; i++)
                        {
                            <tr>
                                <td style="width: auto;justify-items:center">@i</td>
                                <td style="width:fit-content">@Plan.TbPlanMasterLines.FirstOrDefault(x => x.Days == i).DaysNames</td>
                                @foreach (var item in MealsCategory)
                                {
                                    <td style="max-width:30px; text-wrap: normal; word-wrap: break-word;">@Plan.TbPlanMasterLines.FirstOrDefault(x => x.Days == i && x.TypeName == item).MealName</td>
                                }

                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public PlanDtoResponse Plan { get; set; } = new PlanDtoResponse();
    public List<string> MealsCategory = new List<string>();

    protected override Task OnInitializedAsync()
    {
        MealsCategory = Plan.TbPlanMasterLines.Select(x => x.TypeName).Distinct().ToList();

        var PlanPerDay = Plan.TbPlanMasterLines.GroupBy(x => x.Days).ToList();
        return base.OnInitializedAsync();
    }

}
